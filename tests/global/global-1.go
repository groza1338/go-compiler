// mega_lexer_test.go
package main

import "fmt"
import (
	"os"
	"strings" // —Å—Ç—Ä–æ–∫–∞ ‚Üí ; (–ø–æ –ø—Ä–∞–≤–∏–ª—É –≤—Å—Ç–∞–≤–∫–∏ –ø–µ—Ä–µ–¥ NL)
)

const (
	_        = iota
	KiB int = 1 << (10 * iota) // —Å–¥–≤–∏–≥
	MiB
)

var (
	// —Ü–µ–ª—ã–µ
	d1 = 0
	d2 = 1_234_567
	o1 = 0o755        // –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤–æ—Å—å–º–µ—Ä–∏—á–Ω—ã—Ö
	o2 = 0755         // —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å –≤–æ—Å—å–º–µ—Ä–∏—á–Ω—ã—Ö
	h1 = 0xDEAD_BEEF  // hex —Å '_'
	h2 = 0x42

	// float (—Ç–æ–ª—å–∫–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ ‚Äî –±–µ–∑ hexfloat)
	f1 = 3.1415
	f2 = .25
	f3 = 1e3
	f4 = 6.022_140_76e+23

	// —Ä—É–Ω—ã (—ç—Å–∫–µ–π–ø—ã: oct, hex, \u, \U, —Å–ø–µ—Ü-—Å–∏–º–≤–æ–ª—ã)
	r1 rune = 'A'
	r2 rune = '\n'
	r3 rune = '\377'
	r4 rune = '\x7F'
	r5 rune = '\u0416'   // –ñ
	r6 rune = '\U0001F60A' // üòä

	// —Å—Ç—Ä–æ–∫–∏
	s1 = "hi\t\"go\"" // –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–∞—è —Å —ç—Å–∫–µ–π–ø–∞–º–∏ ‚Üí ;
	s2 = `raw
text
with
newlines`            // raw —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ ‚Üí ;

	// –∫–æ–º–ø–æ–∑–∏—Ç—ã
	sl = []int{
		1,
		2, // —Ö–≤–æ—Å—Ç–æ–≤–∞—è –∑–∞–ø—è—Ç–∞—è ‚Äî –¥–µ—Ä–∂–∏—Ç SEMI_OFF
	}
	m1 = map[int]string{
		1: "one",
		2: "two", // —Ö–≤–æ—Å—Ç–æ–≤–∞—è –∑–∞–ø—è—Ç–∞—è
	}
)

type point struct {
	X, Y int
	Tag  string `json:"tag,omitempty"` // raw-—Ç—ç–≥
}

func sum(a ...int) int {
	// "..." ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω, SEMI_OFF
	if len(a) == 0 { // ')' ‚Üí ;
		return 0
	}

	total := 0
	for i := 0; i < len(a); i++ { // —è–≤–Ω—ã–µ ';' –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ for
		total += a[i] // ']' ‚Üí ;
	}

	/* –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π
	   –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º —Å—Ç—Ä–æ–∫–∏:
	   –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∫–∞–∫ –ø–µ—Ä–µ–¥ NL */
	total += 1 // ‚Üí ;

	return total // return ‚Üí ;
}

func pipes() {
	ch := make(chan int) // –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥ NL ‚Üí ;
	go func() {
		ch <- 1    // send + –ª–∏—Ç–µ—Ä–∞–ª ‚Üí ;
		close(ch)  // –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥ NL ‚Üí ;
	}() // ')' ‚Üí ;

	select {
	case v := <-ch:
		fmt.Println(v) // ')' ‚Üí ;
	default:
	}
}

func labelsAndFlow() {
L: // –º–µ—Ç–∫–∞: Identifier + ':'
	for i := 0; i < 2; i++ {
		if i == 0 {
			continue // ‚Üí ;
		}
		break // ‚Üí ;
	}
	goto L // –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥ NL ‚Üí ;
}

func ops() {
	u := 7      // ‚Üí ;
	u &^= 1     // op-assign ‚Üí ;
	w := u &^ 2 // '&^' –æ–ø–µ—Ä–∞—Ç–æ—Ä, –¥–µ—Ä–∂–∏—Ç SEMI_OFF –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ ‚Üí ;
	_ = w       // ‚Üí ;

	x := (1 +
		2) // —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ')' ‚Üí ; (–≤ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ ; –ø–µ—Ä–µ–¥ ')' –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å)

	// dot-break: '.' –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ –¥–µ—Ä–∂–∏—Ç SEMI_OFF
	strings.
		NewReplacer("a", "b") // ')' ‚Üí ;

	// –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∏ —Å—Ä–µ–∑—ã
	arr := [5]int{0, 1, 2, 3, 4}
	_ = arr[2]         // ']' ‚Üí ;
	_ = arr[1:4]       // ']' ‚Üí ;
	_ = arr[1:3:5]     // ']' ‚Üí ;

	// —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç—ã
	a := 1
	a += 2  // ‚Üí ;
	a *= 3  // ‚Üí ;
	a++     // '++' ‚Üí ;
	a--     // '--' ‚Üí ;

	// –ª–æ–≥–∏–∫–∞
	ok := (a > 0) && (s1 != "") // —Å—Ç—Ä–æ–∫–∞ –∫–æ–Ω—á–∞–µ—Ç—Å—è –Ω–∞ ')' ‚Üí ;
	_ = ok

	// –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:
	var /* c1 */ f /* c2 */ = /* c3 */ 10
	_ = f // ‚Üí ;

	// –ù–ï–õ–¨–ó–Ø: –ø–µ—Ä–µ–Ω–æ—Å –≤–Ω—É—Ç—Ä–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ–π —Å—Ç—Ä–æ–∫–∏ ‚Äî –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ–π –ø—É—Ç—å –æ—à–∏–±–∫–∏.
	// "broken
	// string"
}

func typesGenericsAndSwitch() {
	// –ø—Ä–æ—Å—Ç–µ–π—à–∏–µ –¥–∂–µ–Ω–µ—Ä–∏–∫–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ª–µ–∫—Å–µ—Ä–∞
	type Num interface{ ~int | ~int64 }
	type Pair[T any] struct{ A, B T }

	y := "hi"
	switch y {
	case "hi":      // —Å—Ç—Ä–æ–∫–æ–≤—ã–π –ª–∏—Ç–µ—Ä–∞–ª ‚Üí ;
		fallthrough // –≤–∫–ª—é—á–∞–µ—Ç SEMI_ON ‚Üí ;
	default:
	}

	var p Pair[int]
	_ = p

	// type switch (–ª–µ–∫—Å–µ—Ä –≤–∏–¥–∏—Ç '.' '(' 'type' ')')
	var anyv any = 10
	switch anyv.(type) {
	case int:
		fmt.Println("int") // ')' ‚Üí ;
	default:
	}
}

func main() {
	fmt.Println(sum(1, 2, 3)) // ')' ‚Üí ;
	pipes()                   // ')' ‚Üí ;
	ops()                     // ')' ‚Üí ;
	typesGenericsAndSwitch()  // ')' ‚Üí ;
	_ = os.Getenv("X")        // ')' ‚Üí ;
}
